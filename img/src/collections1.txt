#direction: right
#spacing: 10
#gravity: .8
#arrowSize: 4
#title: collections1

[IEnumerable|
IEnumerator GetEnumerator()] <:- [IEnumerable<T>]

[IEnumerable<T>|
IEnumerator<T> GetEnumerator()]

[IReadOnlyCollection<T>|
int Count \{ get \}]

[IReadOnlyList<T>|
T this\[int index\]]

[IReadOnlySet<T>|
bool Contains(T item);
bool IsProperSubsetOf(IEnumerable<T> other)
bool IsProperSupersetOf(IEnumerable<T> other)
bool IsSubsetOf(IEnumerable<T> other)
bool IsSupersetOf(IEnumerable<T> other)
bool Overlaps(IEnumerable<T> other)
bool SetEquals(IEnumerable<T> other)]

[IReadOnlyDictionary<TKey, TValue>|
TValue this\[TKey key\] \{ get \}
IEnumerable<TKey> Keys \{ get \}
IEnumerable<TValue> Values \{ get \}|
bool ContainsKey(TKey key)
bool TryGetValue(TKey key, out TValue value)]

[ICollection<T>|
int Count \{ get \}
bool IsReadOnly \{ get \}|
void Add(T item)
void Clear()
bool Contains(T item)
void CopyTo(T\[\] array, int arrayIndex);
bool Remove(T item)]

[IList<T>|
T this\[int index\] { get set }|
int IndexOf(T item)
void Insert(int index, T item)
void RemoveAt(int index)]

[ISet<T>|
void ExceptWith(IEnumerable<T> other)
void IntersectWith(IEnumerable<T> other)
bool IsProperSubsetOf(IEnumerable<T> other)
bool IsProperSupersetOf(IEnumerable<T> other)
bool IsSubsetOf(IEnumerable<T> other)
bool IsSupersetOf(IEnumerable<T> other)
bool Overlaps(IEnumerable<T> other)
bool SetEquals(IEnumerable<T> other)
void SymmetricExceptWith(IEnumerable<T> other)
void UnionWith(IEnumerable<T> other)]

[IDictionary<TKey, TValue>|
TValue this\[TKey key\] { get set }
ICollection<TKey> Keys { get }
ICollection<TValue> Values { get }|
void Add(TKey key, TValue value)
bool ContainsKey(TKey key)
bool Remove(TKey key)
bool TryGetValue(TKey key, out TValue value)]

[IEnumerable<T>] <:-- [IReadOnlyCollection<T>]
[IEnumerable<T>] <:-- [ICollection<T>]
[ICollection<T>] <:-- [IList<T>]
[ICollection<T>] <:-- [ISet<T>]
[ICollection<T>] <:-- [IDictionary<TKey, TValue>]

[IReadOnlyCollection<T>] <:-- [IReadOnlyList<T>]
[IReadOnlyCollection<T>] <:-- [IReadOnlySet<T>]
[IReadOnlyCollection<T>] <:-- [IReadOnlyDictionary<TKey, TValue>]